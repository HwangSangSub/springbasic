// 공통 묶음 스타일 => mixin

@mixin mobileMin {
    @media all and (max-width:px($sizeMinMobile)) {
        @content;
    }
}
@mixin mobile {
    @media all and (max-width: px($sizeMobile)) {
        @content;
    }
}
@mixin mobileMax {
    @media all and (max-width: px($sizeMaxMobile)) {
        @content;
    }
}

@mixin padMin {
    @media all and (max-width: px($sizeMinPad)) {
        @content;
    }
}
@mixin pad {
    @media all and (max-width: px($sizePad)) {
        @content;
    }
}
@mixin padMax {
    @media all and (max-width: px($sizeMaxPad)) {
        @content;
    }
}

@mixin laptopMin {
    @media all and (max-width: px($sizeMinLaptop)) {
        @content;
    }
}
@mixin laptop {
    @media all and (max-width: px($sizeLaptop)) {
        @content;
    }
}
@mixin laptopMax {
    @media all and (max-width: px($sizeMaxLaptop)) {
        @content;
    }
}

@mixin desktopMin {
    @media all and (max-width: px($sizeMinDesktop)) {
        @content;
    }
}
@mixin desktop {
    @media all and (max-width: px($sizeDesktop)) {
        @content;
    }
}
@mixin desktopMax {
    @media all and (max-width: px($sizeMaxDesktop)) {
        @content;
    }
}
@mixin desktopHighMax {
    @media all and (max-width: px($sizeHighMaxDesktop)) {
        @content;
    }
}

// 원페이지 최소 높이
@mixin onepageBaseH {
    @media all and (max-height: px($sizePad)) {
        @content;
    }
}

// 가로보기
@mixin horizontal {
    @media (orientation: landscape)  {
        @content;
    }
}

// print 조건
@mixin print {
    @media only print {
        @content;
    }
}





// 라운드된 네모
@mixin square-wrap(
$radius: null,
$border-width: 0,
$border-color: #000,
$fill-color: null,
$font-color: #000
) {
    border-radius: $radius;
    border: $border-width solid $border-color;
    background-color: $fill-color;
    color: $font-color;
}
    // //라운드된 네모


// flex 한가운데 정렬
@mixin flex-all-center {
    display: flex;
    justify-content: center;
    align-items: center;
}
// //flex 한가운데 정렬

// absolute center
@mixin absolute-all-center {
    position: absolute;
    left: 50%;
    top: 50%;
    transform: translate(-50%, -50%);
    display: block;
}
// //absolute center

// input 기본 스타일 초기화, 다른 스타일 입히기 쉽게
@mixin input-clear-style() {
    appearance: none;
    -webkit-appearance: none;
    -moz-appearance: none;

    border: none;
    background: transparent;
}
// input 기본 스타일 초기화, 다른 스타일 입히기 쉽게

@mixin scroll-remove {    
    scrollbar-width: none;
    &::-webkit-scrollbar {
        display: none;
    }
}

// scroll custom 위한 기본
@mixin scroll-custom-basic {
    scrollbar-color: transparent transparent;
    scrollbar-width: thin;
    &::-webkit-scrollbar {
        width: 0px;
        background: transparent;
    }
    &::-webkit-scrollbar-track-piece {
        background: transparent;
    }
    &::-webkit-scrollbar-track {
        border-radius: 800px;
        background-color: transparent;
    }
    &::-webkit-scrollbar-thumb {
        border-radius: 800px;
        background-color: transparent;
    }
    @content;
}
// scroll custom 위한 기본


// scroll custom
@mixin scroll-custom-gray( $color : rgba($color: #000000, $alpha: 0.4), $width : 8px ) {    
    scrollbar-color: $color transparent;

    &::-webkit-scrollbar {
        width: $width;
    }
    &::-webkit-scrollbar-track {
        // background: transparent url('/theme/main/img/2023/common/bg_scrollbar.png') repeat !important;
        box-shadow: none;
    }
    &::-webkit-scrollbar-thumb {
        background-color: $color;
    }
    @content;
}
// scroll custom


// line skip, 말줄임
@mixin line-skip($limit : 1) {
    overflow: hidden;
    text-overflow: ellipsis;
    @if($limit == 1) {
        white-space: nowrap;
    } @else {
        display: -webkit-box;
        -webkit-line-clamp: $limit;
        -webkit-box-orient: vertical;
    }
}
// line skip, 말줄임

// font-size px -> rem 변경
@mixin transFontsize( $px : 16, $step : pad, $spacing : true ) {
    font-size: calc((transNum($px, $step) * 10) / 10);
    // line-height: transNum($px * 1.32, $step);
    line-height: calc((transNum($px * 1.4, $step) * 10) / 10);
    @if $spacing == true {
        letter-spacing: calc((transNum($px, $step) * -0.05 * 10) / 10);
    }
}
// //font-size px -> rem 변경

@mixin outFontsize( $px : 16, $spacing : true ) {
    font-size: px($px);
    @if $spacing == true {
        letter-spacing: calc(px($px) * -0.05);
    }
}


// font-size first 배치
@mixin fisrtFontsize() {
    @include outFontsize($fontsize);
    @include desktop() {
        @include outFontsize(($fontsize - 1) );
    }
    @include laptop {
        // @include outFontsize($fontsize);
        @include outFontsize(($fontsize - 2) );
    }
    @include pad {        
        @include outFontsize($fontsizePad);
        @include outFontsize(($fontsize - 3) );
    }
    @include mobile {
        @include outFontsize($fontsizePad);
        @include outFontsize(($fontsize - 3) );
    }
}
// //font-size first 배치


// 형광펜
@mixin underline($colorLine : $colorMain, $boldLine : 50) {    
    position: relative;
    z-index: 0;
    display: inline;
    background-image: linear-gradient(to bottom, transparent calc((100 - $boldLine) * 1%), rgba($color : $colorLine, $alpha : 0.3) calc((100 - $boldLine) * 1%));
    background-repeat: no-repeat;
    background-size: 100% 100%;
}


// 선으로 만드는 삼각형 
@mixin borderTriangle($width : 10, $height : 10, $direction : bottom, $color : #fff) {
    border-top: calc(transNum($height, pc) / 2) solid transparent;
    border-right: calc(transNum($width, pc) / 2) solid transparent;
    border-bottom: calc(transNum($height, pc) / 2) solid transparent;
    border-left: calc(transNum($width, pc) / 2) solid transparent;
    @each $d, $length, $base in $directionArr {
        @if $d == $direction {
            @if $length == width {
            border-#{$d}-width: calc(transNum($height, pc));
            border-#{$base}-width: calc(transNum($height, pc));
                border-#{$base}-color: $color;
            } 
            @else if $length == height {
                border-#{$d}-width: calc(transNum($width, pc));
                border-#{$base}-width: calc(transNum($width, pc));
                border-#{$base}-color: $color;
            }
        }
    }
    // @include laptop {        
    //     border-top-width: calc(transNum($height, laptop) / 2);
    //     border-right-width: calc(transNum($width, laptop) / 2);
    //     border-bottom-width: calc(transNum($height, laptop) / 2);
    //     border-left-width: calc(transNum($width, laptop) / 2);
    //     @each $d, $length, $base in $directionArr {
    //         @if $d == $direction {
    //             @if $length == width {
    //             border-#{$d}-width: calc(transNum($height, laptop));
    //             border-#{$base}-width: calc(transNum($height, laptop));
    //             } 
    //             @else if $length == height {
    //                 border-#{$d}-width: calc(transNum($width, laptop));
    //                 border-#{$base}-width: calc(transNum($width, laptop));
    //             }
    //         }
    //     }
    // }
    // @include pad {        
    //     border-top-width: calc(transNum($height, pad) / 2);
    //     border-right-width: calc(transNum($width, pad) / 2);
    //     border-bottom-width: calc(transNum($height, pad) / 2);
    //     border-left-width: calc(transNum($width, pad) / 2);
    //     @each $d, $length, $base in $directionArr {
    //         @if $d == $direction {
    //             @if $length == width {
    //             border-#{$d}-width: calc(transNum($height, pad));
    //             border-#{$base}-width: calc(transNum($height, pad));
    //             } 
    //             @else if $length == height {
    //                 border-#{$d}-width: calc(transNum($width, pad));
    //                 border-#{$base}-width: calc(transNum($width, pad));
    //             }
    //         }
    //     }
    // }
    // @include mobile {        
    //     border-top-width: calc(transNum($height, mobile) / 2);
    //     border-right-width: calc(transNum($width, mobile) / 2);
    //     border-bottom-width: calc(transNum($height, mobile) / 2);
    //     border-left-width: calc(transNum($width, mobile) / 2);
    //     @each $d, $length, $base in $directionArr {
    //         @if $d == $direction {
    //             @if $length == width {
    //             border-#{$d}-width: calc(transNum($height, mobile));
    //             border-#{$base}-width: calc(transNum($height, mobile));
    //             } 
    //             @else if $length == height {
    //                 border-#{$d}-width: calc(transNum($width, mobile));
    //                 border-#{$base}-width: calc(transNum($width, mobile));
    //             }
    //         }
    //     }
    // }
}

// 버튼 - 선
@mixin btnBorder ( $bgColor : #fff, $pointColor : #000, $opacity : 1.0, ) {
    width: 129px;
    height: 50px;
    @include flex-all-center();
    gap: 17px;
    // border: 1px solid rgba($color: $pointColor, $alpha: $opacity);
    border: 1px solid rgba($color: $pointColor, $alpha: $opacity);
    color: $pointColor;
    @include pad {
        width: 97px;
        height: 40px;
        gap: 12px;
    }
    
    > .icon {
        @include flex-all-center();
        transition: all .3s;
        @include pad {
            width: 11px;

            img {
                width: 100%;
            }
        }
    }
    > .txt {
        line-height: 1;
        transition: all .3s;
        @include pad {
            font-size: 15px;
            letter-spacing: -0.9px;
            line-height: 24px;
        }
    }
}

// 버튼 - 호버시 애니메이션
@mixin btnBorderAni ($beforeBgColor: #fff, $beforeColor: #000, $beforeBorderColor: #000, $afterBgColor: #000, $afterColor: #fff, $borderW: 1px, $direction : right ) {
    // direction to, from
    $directionMap : (
        right : left,
        left : right,
        bottom : top,
        top : bottom
    );
    border: $borderW solid $beforeBorderColor;
    color: $beforeColor;
    background: linear-gradient(to map-get($directionMap, $direction), transparent 50%, $afterBgColor 50%) $direction;
    background-size: calc(200% + 2px);
    transition: all .3s;
    &:hover {
        border-color: $afterBgColor;
        background-position: map-get($directionMap, $direction);

        > .txt {
            color : $afterColor;
        }
    }
}


// 버튼 - 채움(자유색)
@mixin btnFill ($w : 52, $h : 32, $bgColor : #9D9D9D, $color : #fff) {
    width: calc($w * 1px);
    height: calc($h * 1px);
    @include flex-all-center();
    gap: 5px;
    background-color: $bgColor;
    color: $color;
    @include pad {
        @if($w > 100){
            width: calc($w / 129 * 97 * 1px);
            height: calc($h / 50 * 40 * 1px);
            gap: 10px;
        }
    }
    
    > .icon {
        @include flex-all-center();
        @include pad {
            width: 11px;
            height: 15px;
            padding-top: 2.5px;

            > img {
                width: 100%;
            }
        }
    }
    > .txt {
    }
}



// 스와이퍼 재생, 일시정지 버튼
@mixin btnSwiperPlay ( $color : #fff ) {
    position: relative;            
    width: 30px;
    height: 30px;               
    &::before {
        content: '';
        position: absolute;
        // left: 0;
        // top: 0;
        left: calc((100% + 6px) / 2 + 2px); /* (전체 + 가로 길이) / 2 */
        top: 50%;
        transform: translate(-50%, -50%);
        display: block;
        width: 0;
        height: 0;
        background-color: transparent;
        border-left: 9px solid $color;
        border-top: 6px solid transparent;
        border-right: 9px solid transparent;
        border-bottom: 6px solid transparent;
    }
    &::after {
        content: '';
        position: absolute;
        // right: 0;
        // top: 0;
        right: calc(50% - 2px / 2 - 2px * 2 / 2);  /* 중앙 - 서로간 거리 / 2 - 선두께의 총합 / 2 */
        top: 50%;
        transform: translate(50%, -50%);
        display: none;
        width: 2px;
        // height: 100%;
        height: 10px;
        background-color: $color;
    }
    &.pause {
        overflow: hidden;
        &::before {
            left: calc(50% - 2px / 2 - 2px * 2 / 2); /* 중앙 - 서로간 거리 / 2 - 선두께의 총합의 반 */
            width: 2px;
            // height: 100%;
            height: 10px;
            background-color: $color;
            border: none;
        }
        &::after {
            display: block;
        }
    }
}


// list styles
@mixin list-style-disc($fontSize : $fontsize, $lineHScale : 1.4, $ver : pc, $discSize : 3, $color: #000) {
    > li {
        position: relative;

        &::before {
            content: '';
            position: absolute;
            left: calc(floor( transNum($fontSize, $ver) / 16 * -9 * 10) / 10);
            top: calc(floor( (transNum($fontSize, $ver) * $lineHScale) / 2 * 10) / 10);
            transform: translateY(-50%);
            display: block;
            width: $discSize + px;
            height: $discSize + px;
            border-radius: 50%;
            background-color: $color;
        }
    }
}

@mixin list-style-bar($fontSize : $fontsize, $lineHScale : 1.4, $ver : pc, $barWidth : 3) {
    padding-left: px(14);
    > li {
        position: relative;

        &::before {
            content: '';
            position: absolute;
            left: px(-10);
            top: calc( (transNum($fontSize, $ver) * $lineHScale - 1px) / 2 );
            display: block;
            width: px($barWidth);
            height: 1px;
            border-radius: 50%;
            background-color: #000;
        }
    }
}



@mixin table-style-base {
    // padding: transNum(20, pc) 0;
    overflow-x: auto;
    
    table {
        min-width: $sizeLayout;
        
        &:has(thead tr > :last-child:nth-child(1)),
        &:has(thead tr > :last-child:nth-child(2)),
        &:has(thead tr > :last-child:nth-child(3)) {
            min-width: unset;
        }
        &:has(thead tr > :last-child:nth-child(4)) {
            min-width: $sizeLaptop;
        }
        &.unscroll {

            &-width {
                min-width: unset;
            }
        }
    } 
    thead {
        height: transNum(50, pc);
        @include pad {
            height: transNum(50, pad);
        }
    }
    tbody {}
    th, td {
        border: 1px solid #EEEEEE;
        letter-spacing: calc(transNum($fontsize, pc) * -0.0125);
        &:first-of-type {
            border-left-width: 0;
        }
        &:last-of-type {
            border-right-width: 0;
        }
        &.col-num {
            @include pad {
                width: transNum(80, pad);
            }
        }

        .box {
            width: 100%;
            height: 100%;
            &:not(:has(ol, ul)) {                
                @include flex-all-center;
                text-align: center;
            }
            &.col {
                flex-direction: column;
                gap: 2px;
            }
        }
    }
    th {
        background-color: #F9F9F9;
        border-top-color: #DBDBDB;
        font-weight: 600;
    }
    td {
        padding: transNum(20, pc);
    }
}